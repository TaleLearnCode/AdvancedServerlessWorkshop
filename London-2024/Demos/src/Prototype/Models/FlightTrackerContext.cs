// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Prototype3.Models;

public partial class FlightTrackerContext : DbContext
{
    public FlightTrackerContext()
    {
    }

    public FlightTrackerContext(DbContextOptions<FlightTrackerContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AircraftType> AircraftTypes { get; set; }

    public virtual DbSet<Airline> Airlines { get; set; }

    public virtual DbSet<Airport> Airports { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<CustomerFlightStatus> CustomerFlightStatuses { get; set; }

    public virtual DbSet<FlightPlan> FlightPlans { get; set; }

    public virtual DbSet<FlightSchedule> FlightSchedules { get; set; }

    public virtual DbSet<FlightStatus> FlightStatuses { get; set; }

    public virtual DbSet<FlightTelemetry> FlightTelemetries { get; set; }

    public virtual DbSet<ScheduledFlight> ScheduledFlights { get; set; }

    public virtual DbSet<WorldRegion> WorldRegions { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=FlightTracker;Integrated Security=True;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AircraftType>(entity =>
        {
            entity.HasKey(e => e.AircraftTypeCode).HasName("pkcAircraftType");

            entity.ToTable("AircraftType", tb => tb.HasComment("Lookup table of the different types of aircraft in use by the tracked flights."));

            entity.Property(e => e.AircraftTypeCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("The code for the aircraft type.");
            entity.Property(e => e.AircraftTypeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the aircraft type.");
            entity.Property(e => e.ApproachAltitudeLower).HasComment("The lower bound of the approach altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.ApproachAltitudeUpper).HasComment("The upper bound of the approach altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.ApproachSpeedLower).HasComment("The lower bound of the approach speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.ApproachSpeedUpper).HasComment("The upper bound of the approach speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.ClimbSpeedLower).HasComment("The lower bound of the climb speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.ClimbSpeedUpper).HasComment("The upper bound of the climb speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.CruiseAltitudeLower).HasComment("The lower bound of the cruise altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.CruiseAltitudeUpper).HasComment("The upper bound of the cruise altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.CruiseSpeedLower).HasComment("The lower bound of the cruise speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.CruiseSpeedUpper).HasComment("The upper bound of the cruise speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.DescentSpeedLower).HasComment("The lower bound of the descent speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.DescentSpeedUpper).HasComment("The upper bound of the descent speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.InitialClimbAltitudeLower).HasComment("The lower bound of the initial climb altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.InitialClimbAltitudeUpper).HasComment("The upper bound of the initial climb altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.InitialClimbSpeedLower).HasComment("The lower bound of the initial climb speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.InitialClimbSpeedUpper).HasComment("The upper bound of the initial climb speed range for the aircraft type. in kilometers per hour (KPH)");
            entity.Property(e => e.LandingSpeedLower).HasComment("The lower bound of the landing speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.LandingSpeedUpper).HasComment("The upper bound of the landing speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.Manufacturer)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The manufacturer of the aircraft type.");
            entity.Property(e => e.RotationalSpeedLower).HasComment("The lower bound of the rotational speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.RotationalSpeedUpper).HasComment("The upper bound of the rotational speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.TaxiSpeed).HasComment("The taxi speed for the aircraft type in kilometers per hour (KPH).");
        });

        modelBuilder.Entity<Airline>(entity =>
        {
            entity.HasKey(e => e.Iatacode).HasName("pkcAirline");

            entity.ToTable("Airline", tb => tb.HasComment("Lookup table representing the airlines supported by the system."));

            entity.Property(e => e.Iatacode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code for the airline.")
                .HasColumnName("IATACode");
            entity.Property(e => e.AirlineName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the airline.");
            entity.Property(e => e.Callsign)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The callsign for the airline.");
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code of the country where the airline is headquatered.");
            entity.Property(e => e.Icaocode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The ICAO code for the airline.")
                .HasColumnName("ICAOCode");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the airline is active within the system.");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Airlines)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkcAirlineCountry");
        });

        modelBuilder.Entity<Airport>(entity =>
        {
            entity.HasKey(e => e.Iatacode).HasName("pkcAirport");

            entity.ToTable("Airport", tb => tb.HasComment("Lookup table representing the aiports supported by the system."));

            entity.Property(e => e.Iatacode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code for the airline.")
                .HasColumnName("IATACode");
            entity.Property(e => e.AirportName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the airport.");
            entity.Property(e => e.CityName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the city where the airport is located.");
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code of the country where the airport is located.");
            entity.Property(e => e.Elevation).HasComment("The elevation of the airport in feet.");
            entity.Property(e => e.Icaocode)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The ICAO code for the airline.")
                .HasColumnName("ICAOCode");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the airport is active within the system.");
            entity.Property(e => e.Latitude)
                .HasComment("The latitude of the airport.")
                .HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude)
                .HasComment("The longitude of the airport.")
                .HasColumnType("decimal(9, 6)");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Airports)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkcAirportCountry");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryCode).HasName("pkcCountry");

            entity.ToTable("Country", tb => tb.HasComment("Lookup table representing the countries as defined by the ISO 3166-1 standard."));

            entity.HasIndex(e => e.WorldRegionCode, "idxCountry_WorldRegionCode");

            entity.HasIndex(e => e.WorldSubregionCode, "idxCountry_WorldSubregionCode");

            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the country using the ISO 3166-1 Alpha-2 code.");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the country using the ISO 3166-1 Country Name.");
            entity.Property(e => e.DivisionName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The primary name of the country's divisions.");
            entity.Property(e => e.HasDivisions).HasComment("Flag indicating whether the country has divisions (states, provinces, etc.)");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the country record is active.");
            entity.Property(e => e.WorldRegionCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region where the country is located.");
            entity.Property(e => e.WorldSubregionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world subregion where the country is located.");

            entity.HasOne(d => d.WorldRegionCodeNavigation).WithMany(p => p.CountryWorldRegionCodeNavigations)
                .HasForeignKey(d => d.WorldRegionCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCountry_WorldRegion");

            entity.HasOne(d => d.WorldSubregionCodeNavigation).WithMany(p => p.CountryWorldSubregionCodeNavigations)
                .HasForeignKey(d => d.WorldSubregionCode)
                .HasConstraintName("fkCountry_WorldSubregion");
        });

        modelBuilder.Entity<CustomerFlightStatus>(entity =>
        {
            entity.HasKey(e => e.CustomerFlightStatusCode).HasName("pkcCustomerFlightStatus");

            entity.ToTable("CustomerFlightStatus", tb => tb.HasComment("Lookup table of the different status of a customer's flight."));

            entity.Property(e => e.CustomerFlightStatusCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code for the customer's flight status.");
            entity.Property(e => e.AssociatedFlightStatusCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code of the associated flight status.");
            entity.Property(e => e.CustomerFlightStatusDescription)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("The description of the customer's flight status.");
            entity.Property(e => e.CustomerFlightStatusName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the customer's flight status.");

            entity.HasOne(d => d.AssociatedFlightStatusCodeNavigation).WithMany(p => p.CustomerFlightStatuses)
                .HasForeignKey(d => d.AssociatedFlightStatusCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCustomerFlightStatus_FlightStatus");
        });

        modelBuilder.Entity<FlightPlan>(entity =>
        {
            entity.HasKey(e => e.FlightPlanId).HasName("pkcFlightPlan");

            entity.ToTable("FlightPlan", tb => tb.HasComment("Filed plans of flights to be tracked by the system."));

            entity.Property(e => e.FlightPlanId).HasComment("Identifier of the flight plan.");
            entity.Property(e => e.AircraftTypeCode)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("The type of aircraft used for the flight.");
            entity.Property(e => e.AirlineCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airline.");
            entity.Property(e => e.ArrivalTime)
                .HasComment("The date and time when the flight arrives.")
                .HasColumnType("datetime");
            entity.Property(e => e.Bearing).HasComment("The direction of the flight in degrees.");
            entity.Property(e => e.CruiseAltitude).HasComment("The altitude at which the aircraft cruises during the flight.");
            entity.Property(e => e.CurrentFlightPhase)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The current phase of the flight.");
            entity.Property(e => e.DepartureTime)
                .HasComment("The date and time when the flight departs.")
                .HasColumnType("datetime");
            entity.Property(e => e.DestinationAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight arrives.");
            entity.Property(e => e.FlightNumber)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The flight number assigned by the airline.");
            entity.Property(e => e.InitialClimbAltitude).HasComment("The altitude at which the aircraft starts climbing after takeoff.");
            entity.Property(e => e.LandingSpeed).HasComment("The speed at which the aircraft lands.");
            entity.Property(e => e.OriginAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight departs.");
            entity.Property(e => e.RotationalSpeed).HasComment("The speed at which the aircraft rotates during takeoff.");
            entity.Property(e => e.StartApproachAltitude).HasComment("The altitude at which the aircraft starts the approach to the destination airport.");
            entity.Property(e => e.StartDescentDistance).HasComment("The distance from the destination airport at which the aircraft starts descending.");

            entity.HasOne(d => d.AircraftTypeCodeNavigation).WithMany(p => p.FlightPlans)
                .HasForeignKey(d => d.AircraftTypeCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_AircraftType");

            entity.HasOne(d => d.AirlineCodeNavigation).WithMany(p => p.FlightPlans)
                .HasForeignKey(d => d.AirlineCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_Airline");

            entity.HasOne(d => d.CurrentFlightPhaseNavigation).WithMany(p => p.FlightPlans)
                .HasForeignKey(d => d.CurrentFlightPhase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_FlightStatus");

            entity.HasOne(d => d.DestinationAirportCodeNavigation).WithMany(p => p.FlightPlanDestinationAirportCodeNavigations)
                .HasForeignKey(d => d.DestinationAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_Airport_Destination");

            entity.HasOne(d => d.OriginAirportCodeNavigation).WithMany(p => p.FlightPlanOriginAirportCodeNavigations)
                .HasForeignKey(d => d.OriginAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_Airport_Origin");
        });

        modelBuilder.Entity<FlightSchedule>(entity =>
        {
            entity.HasKey(e => e.FlightScheduleCode).HasName("pkcFlightSchedule");

            entity.ToTable("FlightSchedule", tb => tb.HasComment("Lookup table representing the daily flight schedule."));

            entity.HasIndex(e => new { e.AirlineCode, e.FlightNumber }, "uqcFlightSchedule").IsUnique();

            entity.Property(e => e.FlightScheduleCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the scheduled daily flight.");
            entity.Property(e => e.AircraftTypeCode)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("The type of aircraft used for the flight.");
            entity.Property(e => e.AirlineCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airline operating the flight.");
            entity.Property(e => e.ArrivalAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight arrives.");
            entity.Property(e => e.ArrivalTime).HasComment("The time of day when the flight arrives.");
            entity.Property(e => e.DepartureAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight departs.");
            entity.Property(e => e.DepartureTime).HasComment("The time of day when the flight departs.");
            entity.Property(e => e.FlightNumber)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The flight number for the scheduled flight.");
            entity.Property(e => e.FlightTime).HasComment("The duration of the flight in minutes.");

            entity.HasOne(d => d.AircraftTypeCodeNavigation).WithMany(p => p.FlightSchedules)
                .HasForeignKey(d => d.AircraftTypeCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightSchedule_AircraftType");

            entity.HasOne(d => d.AirlineCodeNavigation).WithMany(p => p.FlightSchedules)
                .HasForeignKey(d => d.AirlineCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightSchedule_Airline");

            entity.HasOne(d => d.ArrivalAirportCodeNavigation).WithMany(p => p.FlightScheduleArrivalAirportCodeNavigations)
                .HasForeignKey(d => d.ArrivalAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightSchedule_Airport_Arrival");

            entity.HasOne(d => d.DepartureAirportCodeNavigation).WithMany(p => p.FlightScheduleDepartureAirportCodeNavigations)
                .HasForeignKey(d => d.DepartureAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightSchedule_Airport_Departure");
        });

        modelBuilder.Entity<FlightStatus>(entity =>
        {
            entity.HasKey(e => e.FlightStatusCode).HasName("pkcFlightStatus");

            entity.ToTable("FlightStatus", tb => tb.HasComment("Lookup table of the different status of a flight."));

            entity.Property(e => e.FlightStatusCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code for the flight status.");
            entity.Property(e => e.FlightStatusDescription)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("The description of the flight status.");
            entity.Property(e => e.FlightStatusName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the flight status.");
        });

        modelBuilder.Entity<FlightTelemetry>(entity =>
        {
            entity.HasKey(e => e.FlightTelemetryId).HasName("pkcFlightTelemetry");

            entity.ToTable("FlightTelemetry", tb => tb.HasComment("Table to store the Telemetry data for a flight."));

            entity.Property(e => e.FlightTelemetryId).HasComment("Identifier of the Telemetry data for a flight.");
            entity.Property(e => e.Altitude).HasComment("The altitude of the aircraft at the time of the Telemetry data.");
            entity.Property(e => e.DistanceSinceLast).HasComment("The distance traveled in kilometers since the last Telemetry data.");
            entity.Property(e => e.DistanceSinceOrigin).HasComment("The distance traveled in kilometers since the origin of the flight.");
            entity.Property(e => e.DistanceToDestination).HasComment("The distance remaining in kilometers to the destination of the flight.");
            entity.Property(e => e.FlightDuration).HasComment("The duration of the flight in milliseconds at the time of the Telemetry data.");
            entity.Property(e => e.FlightPlanId).HasComment("Identifier of the Flight Plan for the Telemetry data.");
            entity.Property(e => e.FlightStatusCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The status of the flight at the time of the Telemetry data.");
            entity.Property(e => e.GroundSpeed).HasComment("The speed of the aircraft relative to the ground at the time of the Telemetry data.");
            entity.Property(e => e.Latitude)
                .HasComment("The latitude of the aircraft at the time of the Telemetry data.")
                .HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude)
                .HasComment("The longitude of the aircraft at the time of the Telemetry data.")
                .HasColumnType("decimal(9, 6)");
            entity.Property(e => e.PhaseSequence).HasComment("The sequential count of data recordings within the flight phase.");
            entity.Property(e => e.TelemetryTimestamp)
                .HasComment("Timestamp of the Telemetry data.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.FlightPlan).WithMany(p => p.FlightTelemetries)
                .HasForeignKey(d => d.FlightPlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightTelemetry_FlightPlan");

            entity.HasOne(d => d.FlightStatusCodeNavigation).WithMany(p => p.FlightTelemetries)
                .HasForeignKey(d => d.FlightStatusCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightTelemetry_FlightStatus");
        });

        modelBuilder.Entity<ScheduledFlight>(entity =>
        {
            entity.HasKey(e => e.ScheuledFlightId).HasName("pkcScheduledFlight");

            entity.ToTable("ScheduledFlight", tb => tb.HasComment("Lookup table representing the scheduled flight."));

            entity.Property(e => e.ScheuledFlightId).HasComment("Identifier of the scheduled flight.");
            entity.Property(e => e.AircraftTypeCode)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("The type of aircraft used for the flight.");
            entity.Property(e => e.CurrentStatusCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The current status of the flight.");
            entity.Property(e => e.DestinationAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight arrives.");
            entity.Property(e => e.OriginAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight departs.");

            entity.HasOne(d => d.AircraftTypeCodeNavigation).WithMany(p => p.ScheduledFlights)
                .HasForeignKey(d => d.AircraftTypeCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkScheduledFlight_AircraftType");

            entity.HasOne(d => d.DestinationAirportCodeNavigation).WithMany(p => p.ScheduledFlightDestinationAirportCodeNavigations)
                .HasForeignKey(d => d.DestinationAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkScheduledFlight_Airport_Destination");

            entity.HasOne(d => d.OriginAirportCodeNavigation).WithMany(p => p.ScheduledFlightOriginAirportCodeNavigations)
                .HasForeignKey(d => d.OriginAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkScheduledFlight_Airport_Origin");
        });

        modelBuilder.Entity<WorldRegion>(entity =>
        {
            entity.HasKey(e => e.WorldRegionCode).HasName("pkcWorldRegion");

            entity.ToTable("WorldRegion", tb => tb.HasComment("Lookup table representing the world regions as defined by the UN M49 specification."));

            entity.HasIndex(e => e.ParentId, "idxWorldRegion_ParentId");

            entity.Property(e => e.WorldRegionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region.");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the world region is active.");
            entity.Property(e => e.ParentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region parent (for subregions).");
            entity.Property(e => e.WorldRegionName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the world region.");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("fkWorldRegion_WorldRegion");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}