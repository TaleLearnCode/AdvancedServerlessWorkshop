// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace TaleLearnCode.FlightTrackingDemo.SqlData.Models;

/// <summary>
/// Filed plans of flights to be tracked by the system.
/// </summary>
public partial class FlightPlan
{
    /// <summary>
    /// Identifier of the flight plan.
    /// </summary>
    public Guid FlightPlanId { get; set; }

    /// <summary>
    /// The IATA code of the airline.
    /// </summary>
    public string AirlineCode { get; set; }

    /// <summary>
    /// The flight number assigned by the airline.
    /// </summary>
    public string FlightNumber { get; set; }

    /// <summary>
    /// The IATA code of the airport where the flight departs.
    /// </summary>
    public string OriginAirportCode { get; set; }

    /// <summary>
    /// The IATA code of the airport where the flight arrives.
    /// </summary>
    public string DestinationAirportCode { get; set; }

    /// <summary>
    /// The type of aircraft used for the flight.
    /// </summary>
    public string AircraftTypeCode { get; set; }

    /// <summary>
    /// The date and time when the flight departs.
    /// </summary>
    public DateTime DepartureTime { get; set; }

    /// <summary>
    /// The date and time when the flight arrives.
    /// </summary>
    public DateTime ArrivalTime { get; set; }

    /// <summary>
    /// The direction of the flight in degrees.
    /// </summary>
    public double Bearing { get; set; }

    /// <summary>
    /// The speed at which the aircraft rotates during takeoff.
    /// </summary>
    public int RotationalSpeed { get; set; }

    /// <summary>
    /// The altitude at which the aircraft starts climbing after takeoff.
    /// </summary>
    public int InitialClimbAltitude { get; set; }

    /// <summary>
    /// The altitude at which the aircraft cruises during the flight.
    /// </summary>
    public int CruiseAltitude { get; set; }

    /// <summary>
    /// The distance from the destination airport at which the aircraft starts descending.
    /// </summary>
    public int StartDescentDistance { get; set; }

    /// <summary>
    /// The altitude at which the aircraft starts the approach to the destination airport.
    /// </summary>
    public int StartApproachAltitude { get; set; }

    /// <summary>
    /// The current phase of the flight.
    /// </summary>
    public string CurrentFlightPhase { get; set; }

    /// <summary>
    /// The speed at which the aircraft lands.
    /// </summary>
    public int LandingSpeed { get; set; }

    public virtual AircraftType AircraftTypeCodeNavigation { get; set; }

    public virtual Airline AirlineCodeNavigation { get; set; }

    public virtual FlightStatus CurrentFlightPhaseNavigation { get; set; }

    public virtual Airport DestinationAirportCodeNavigation { get; set; }

    public virtual ICollection<FlightTelemetry> FlightTelemetries { get; set; } = new List<FlightTelemetry>();

    public virtual Airport OriginAirportCodeNavigation { get; set; }

    public virtual ICollection<Telemetry> Telemetries { get; set; } = new List<Telemetry>();
}