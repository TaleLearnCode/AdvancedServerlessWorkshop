// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TaleLearnCode.FlightTrackingDemo.SqlData.Models;

public partial class FlightTrackerContext : DbContext
{
    public FlightTrackerContext()
    {
    }

    public FlightTrackerContext(DbContextOptions<FlightTrackerContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AircraftType> AircraftTypes { get; set; }

    public virtual DbSet<Airline> Airlines { get; set; }

    public virtual DbSet<Airport> Airports { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<CustomerFlightStatus> CustomerFlightStatuses { get; set; }

    public virtual DbSet<CustomerFlightStatusToFlightStatus> CustomerFlightStatusToFlightStatuses { get; set; }

    public virtual DbSet<FlightPlan> FlightPlans { get; set; }

    public virtual DbSet<FlightSchedule> FlightSchedules { get; set; }

    public virtual DbSet<FlightStatus> FlightStatuses { get; set; }

    public virtual DbSet<FlightTelemetry> FlightTelemetries { get; set; }

    public virtual DbSet<Telemetry> Telemetries { get; set; }

    public virtual DbSet<TelemetryElectricalSystem> TelemetryElectricalSystems { get; set; }

    public virtual DbSet<TelemetryElectricalSystemFault> TelemetryElectricalSystemFaults { get; set; }

    public virtual DbSet<TelemetryEngineDataFaultCode> TelemetryEngineDataFaultCodes { get; set; }

    public virtual DbSet<TelemetryEngineDatum> TelemetryEngineData { get; set; }

    public virtual DbSet<TelemetryFlightParameter> TelemetryFlightParameters { get; set; }

    public virtual DbSet<TelemetryFuelSystemDatum> TelemetryFuelSystemData { get; set; }

    public virtual DbSet<TelemetryFuelTankLevel> TelemetryFuelTankLevels { get; set; }

    public virtual DbSet<TelemetryHydraulicSystem> TelemetryHydraulicSystems { get; set; }

    public virtual DbSet<TelemetryHydraulicSystemFluidLevel> TelemetryHydraulicSystemFluidLevels { get; set; }

    public virtual DbSet<TelemetryLocation> TelemetryLocations { get; set; }

    public virtual DbSet<WorldRegion> WorldRegions { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=FlightTracker;Integrated Security=True;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AircraftType>(entity =>
        {
            entity.HasKey(e => e.AircraftTypeCode).HasName("pkcAircraftType");

            entity.ToTable("AircraftType", tb => tb.HasComment("Lookup table of the different types of aircraft in use by the tracked flights."));

            entity.Property(e => e.AircraftTypeCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("The code for the aircraft type.");
            entity.Property(e => e.AircraftTypeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the aircraft type.");
            entity.Property(e => e.ApproachAltitudeLower).HasComment("The lower bound of the approach altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.ApproachAltitudeUpper).HasComment("The upper bound of the approach altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.ApproachSpeedLower).HasComment("The lower bound of the approach speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.ApproachSpeedUpper).HasComment("The upper bound of the approach speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.ClimbSpeedLower).HasComment("The lower bound of the climb speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.ClimbSpeedUpper).HasComment("The upper bound of the climb speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.CruiseAltitudeLower).HasComment("The lower bound of the cruise altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.CruiseAltitudeUpper).HasComment("The upper bound of the cruise altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.CruiseSpeedLower).HasComment("The lower bound of the cruise speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.CruiseSpeedUpper).HasComment("The upper bound of the cruise speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.DescentSpeedLower).HasComment("The lower bound of the descent speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.DescentSpeedUpper).HasComment("The upper bound of the descent speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.InitialClimbAltitudeLower).HasComment("The lower bound of the initial climb altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.InitialClimbAltitudeUpper).HasComment("The upper bound of the initial climb altitude range for the aircraft type in meters (m).");
            entity.Property(e => e.InitialClimbSpeedLower).HasComment("The lower bound of the initial climb speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.InitialClimbSpeedUpper).HasComment("The upper bound of the initial climb speed range for the aircraft type. in kilometers per hour (KPH)");
            entity.Property(e => e.LandingSpeedLower).HasComment("The lower bound of the landing speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.LandingSpeedUpper).HasComment("The upper bound of the landing speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.Manufacturer)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The manufacturer of the aircraft type.");
            entity.Property(e => e.RotationalSpeedLower).HasComment("The lower bound of the rotational speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.RotationalSpeedUpper).HasComment("The upper bound of the rotational speed range for the aircraft type in kilometers per hour (KPH).");
            entity.Property(e => e.TaxiSpeed).HasComment("The taxi speed for the aircraft type in kilometers per hour (KPH).");
        });

        modelBuilder.Entity<Airline>(entity =>
        {
            entity.HasKey(e => e.Iatacode).HasName("pkcAirline");

            entity.ToTable("Airline", tb => tb.HasComment("Lookup table representing the airlines supported by the system."));

            entity.Property(e => e.Iatacode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code for the airline.")
                .HasColumnName("IATACode");
            entity.Property(e => e.AirlineName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the airline.");
            entity.Property(e => e.Callsign)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The callsign for the airline.");
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code of the country where the airline is headquatered.");
            entity.Property(e => e.Icaocode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The ICAO code for the airline.")
                .HasColumnName("ICAOCode");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the airline is active within the system.");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Airlines)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkcAirlineCountry");
        });

        modelBuilder.Entity<Airport>(entity =>
        {
            entity.HasKey(e => e.Iatacode).HasName("pkcAirport");

            entity.ToTable("Airport", tb => tb.HasComment("Lookup table representing the aiports supported by the system."));

            entity.Property(e => e.Iatacode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code for the airline.")
                .HasColumnName("IATACode");
            entity.Property(e => e.AirportName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the airport.");
            entity.Property(e => e.CityName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the city where the airport is located.");
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code of the country where the airport is located.");
            entity.Property(e => e.Elevation).HasComment("The elevation of the airport in feet.");
            entity.Property(e => e.Icaocode)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The ICAO code for the airline.")
                .HasColumnName("ICAOCode");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the airport is active within the system.");
            entity.Property(e => e.Latitude)
                .HasComment("The latitude of the airport.")
                .HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude)
                .HasComment("The longitude of the airport.")
                .HasColumnType("decimal(9, 6)");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Airports)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkcAirportCountry");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryCode).HasName("pkcCountry");

            entity.ToTable("Country", tb => tb.HasComment("Lookup table representing the countries as defined by the ISO 3166-1 standard."));

            entity.HasIndex(e => e.WorldRegionCode, "idxCountry_WorldRegionCode");

            entity.HasIndex(e => e.WorldSubregionCode, "idxCountry_WorldSubregionCode");

            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the country using the ISO 3166-1 Alpha-2 code.");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the country using the ISO 3166-1 Country Name.");
            entity.Property(e => e.DivisionName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The primary name of the country's divisions.");
            entity.Property(e => e.HasDivisions).HasComment("Flag indicating whether the country has divisions (states, provinces, etc.)");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the country record is active.");
            entity.Property(e => e.WorldRegionCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region where the country is located.");
            entity.Property(e => e.WorldSubregionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world subregion where the country is located.");

            entity.HasOne(d => d.WorldRegionCodeNavigation).WithMany(p => p.CountryWorldRegionCodeNavigations)
                .HasForeignKey(d => d.WorldRegionCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCountry_WorldRegion");

            entity.HasOne(d => d.WorldSubregionCodeNavigation).WithMany(p => p.CountryWorldSubregionCodeNavigations)
                .HasForeignKey(d => d.WorldSubregionCode)
                .HasConstraintName("fkCountry_WorldSubregion");
        });

        modelBuilder.Entity<CustomerFlightStatus>(entity =>
        {
            entity.HasKey(e => e.CustomerFlightStatusCode).HasName("pkcCustomerFlightStatus");

            entity.ToTable("CustomerFlightStatus", tb => tb.HasComment("Lookup table of the different status of a customer's flight."));

            entity.Property(e => e.CustomerFlightStatusCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code for the customer's flight status.");
            entity.Property(e => e.CustomerFlightStatusDescription)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("The description of the customer's flight status.");
            entity.Property(e => e.CustomerFlightStatusName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the customer's flight status.");
        });

        modelBuilder.Entity<CustomerFlightStatusToFlightStatus>(entity =>
        {
            entity.HasKey(e => e.CustomerFlightStatusToFlightStatusId).HasName("pkcCustomerFlightStatusToFlightStatus");

            entity.ToTable("CustomerFlightStatusToFlightStatus", tb => tb.HasComment("Lookup table to associate a customer's flight status with a flight status."));

            entity.Property(e => e.CustomerFlightStatusToFlightStatusId)
                .ValueGeneratedNever()
                .HasComment("The unique identifier for the CustomerFlightStatusToFlightStatus table.");
            entity.Property(e => e.CustomerFlightStatusCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code for the customer's flight status.");
            entity.Property(e => e.FlightStatusCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code for the flight status.");

            entity.HasOne(d => d.CustomerFlightStatusCodeNavigation).WithMany(p => p.CustomerFlightStatusToFlightStatuses)
                .HasForeignKey(d => d.CustomerFlightStatusCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCustomerFlightStatusToFlightStatus_CustomerFlightStatus");

            entity.HasOne(d => d.FlightStatusCodeNavigation).WithMany(p => p.CustomerFlightStatusToFlightStatuses)
                .HasForeignKey(d => d.FlightStatusCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCustomerFlightStatusToFlightStatus_FlightStatus");
        });

        modelBuilder.Entity<FlightPlan>(entity =>
        {
            entity.HasKey(e => e.FlightPlanId).HasName("pkcFlightPlan");

            entity.ToTable("FlightPlan", tb => tb.HasComment("Filed plans of flights to be tracked by the system."));

            entity.Property(e => e.FlightPlanId)
                .ValueGeneratedNever()
                .HasComment("Identifier of the flight plan.");
            entity.Property(e => e.AircraftTypeCode)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("The type of aircraft used for the flight.");
            entity.Property(e => e.AirlineCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airline.");
            entity.Property(e => e.ArrivalTime)
                .HasComment("The date and time when the flight arrives.")
                .HasColumnType("datetime");
            entity.Property(e => e.Bearing).HasComment("The direction of the flight in degrees.");
            entity.Property(e => e.CruiseAltitude).HasComment("The altitude at which the aircraft cruises during the flight.");
            entity.Property(e => e.CurrentFlightPhase)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The current phase of the flight.");
            entity.Property(e => e.DepartureTime)
                .HasComment("The date and time when the flight departs.")
                .HasColumnType("datetime");
            entity.Property(e => e.DestinationAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight arrives.");
            entity.Property(e => e.FlightNumber)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The flight number assigned by the airline.");
            entity.Property(e => e.InitialClimbAltitude).HasComment("The altitude at which the aircraft starts climbing after takeoff.");
            entity.Property(e => e.LandingSpeed).HasComment("The speed at which the aircraft lands.");
            entity.Property(e => e.OriginAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight departs.");
            entity.Property(e => e.RotationalSpeed).HasComment("The speed at which the aircraft rotates during takeoff.");
            entity.Property(e => e.StartApproachAltitude).HasComment("The altitude at which the aircraft starts the approach to the destination airport.");
            entity.Property(e => e.StartDescentDistance).HasComment("The distance from the destination airport at which the aircraft starts descending.");

            entity.HasOne(d => d.AircraftTypeCodeNavigation).WithMany(p => p.FlightPlans)
                .HasForeignKey(d => d.AircraftTypeCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_AircraftType");

            entity.HasOne(d => d.AirlineCodeNavigation).WithMany(p => p.FlightPlans)
                .HasForeignKey(d => d.AirlineCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_Airline");

            entity.HasOne(d => d.CurrentFlightPhaseNavigation).WithMany(p => p.FlightPlans)
                .HasForeignKey(d => d.CurrentFlightPhase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_FlightStatus");

            entity.HasOne(d => d.DestinationAirportCodeNavigation).WithMany(p => p.FlightPlanDestinationAirportCodeNavigations)
                .HasForeignKey(d => d.DestinationAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_Airport_Destination");

            entity.HasOne(d => d.OriginAirportCodeNavigation).WithMany(p => p.FlightPlanOriginAirportCodeNavigations)
                .HasForeignKey(d => d.OriginAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightPlan_Airport_Origin");
        });

        modelBuilder.Entity<FlightSchedule>(entity =>
        {
            entity.HasKey(e => e.FlightScheduleCode).HasName("pkcFlightSchedule");

            entity.ToTable("FlightSchedule", tb => tb.HasComment("Lookup table representing the daily flight schedule."));

            entity.HasIndex(e => new { e.AirlineCode, e.FlightNumber }, "uqcFlightSchedule").IsUnique();

            entity.Property(e => e.FlightScheduleCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the scheduled daily flight.");
            entity.Property(e => e.AircraftTypeCode)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("The type of aircraft used for the flight.");
            entity.Property(e => e.AirlineCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airline operating the flight.");
            entity.Property(e => e.ArrivalAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight arrives.");
            entity.Property(e => e.ArrivalTime).HasComment("The time of day when the flight arrives.");
            entity.Property(e => e.DepartureAirportCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The IATA code of the airport where the flight departs.");
            entity.Property(e => e.DepartureTime).HasComment("The time of day when the flight departs.");
            entity.Property(e => e.FlightNumber)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The flight number for the scheduled flight.");
            entity.Property(e => e.FlightTime).HasComment("The duration of the flight in minutes.");

            entity.HasOne(d => d.AircraftTypeCodeNavigation).WithMany(p => p.FlightSchedules)
                .HasForeignKey(d => d.AircraftTypeCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightSchedule_AircraftType");

            entity.HasOne(d => d.AirlineCodeNavigation).WithMany(p => p.FlightSchedules)
                .HasForeignKey(d => d.AirlineCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightSchedule_Airline");

            entity.HasOne(d => d.ArrivalAirportCodeNavigation).WithMany(p => p.FlightScheduleArrivalAirportCodeNavigations)
                .HasForeignKey(d => d.ArrivalAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightSchedule_Airport_Arrival");

            entity.HasOne(d => d.DepartureAirportCodeNavigation).WithMany(p => p.FlightScheduleDepartureAirportCodeNavigations)
                .HasForeignKey(d => d.DepartureAirportCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightSchedule_Airport_Departure");
        });

        modelBuilder.Entity<FlightStatus>(entity =>
        {
            entity.HasKey(e => e.FlightStatusCode).HasName("pkcFlightStatus");

            entity.ToTable("FlightStatus", tb => tb.HasComment("Lookup table of the different status of a flight."));

            entity.Property(e => e.FlightStatusCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The code for the flight status.");
            entity.Property(e => e.FlightStatusDescription)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("The description of the flight status.");
            entity.Property(e => e.FlightStatusName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the flight status.");
        });

        modelBuilder.Entity<FlightTelemetry>(entity =>
        {
            entity.HasKey(e => e.FlightTelemetryId).HasName("pkcFlightTelemetry");

            entity.ToTable("FlightTelemetry", tb => tb.HasComment("Table to store the Telemetry data for a flight."));

            entity.Property(e => e.FlightTelemetryId)
                .ValueGeneratedNever()
                .HasComment("Identifier of the Telemetry data for a flight.");
            entity.Property(e => e.Altitude).HasComment("The altitude of the aircraft at the time of the Telemetry data.");
            entity.Property(e => e.DistanceSinceLast).HasComment("The distance traveled in kilometers since the last Telemetry data.");
            entity.Property(e => e.DistanceSinceOrigin).HasComment("The distance traveled in kilometers since the origin of the flight.");
            entity.Property(e => e.DistanceToDestination).HasComment("The distance remaining in kilometers to the destination of the flight.");
            entity.Property(e => e.FlightDuration).HasComment("The duration of the flight in milliseconds at the time of the Telemetry data.");
            entity.Property(e => e.FlightPlanId).HasComment("Identifier of the Flight Plan for the Telemetry data.");
            entity.Property(e => e.FlightStatusCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The status of the flight at the time of the Telemetry data.");
            entity.Property(e => e.GroundSpeed).HasComment("The speed of the aircraft relative to the ground at the time of the Telemetry data.");
            entity.Property(e => e.Latitude)
                .HasComment("The latitude of the aircraft at the time of the Telemetry data.")
                .HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude)
                .HasComment("The longitude of the aircraft at the time of the Telemetry data.")
                .HasColumnType("decimal(9, 6)");
            entity.Property(e => e.PhaseSequence).HasComment("The sequential count of data recordings within the flight phase.");
            entity.Property(e => e.TelemetryTimestamp)
                .HasComment("Timestamp of the Telemetry data.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.FlightPlan).WithMany(p => p.FlightTelemetries)
                .HasForeignKey(d => d.FlightPlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightTelemetry_FlightPlan");

            entity.HasOne(d => d.FlightStatusCodeNavigation).WithMany(p => p.FlightTelemetries)
                .HasForeignKey(d => d.FlightStatusCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFlightTelemetry_FlightStatus");
        });

        modelBuilder.Entity<Telemetry>(entity =>
        {
            entity.HasKey(e => e.FlightTelemetryId).HasName("pkcTelemetry");

            entity.ToTable("Telemetry", tb => tb.HasComment("Table to store the Telemetry data for a flight."));

            entity.Property(e => e.FlightTelemetryId)
                .ValueGeneratedNever()
                .HasComment("Identifier of the Telemetry data for a flight.");
            entity.Property(e => e.FlightPhaseCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("The phase of the flight at the time of the Telemetry data.");
            entity.Property(e => e.FlightPlanId).HasComment("Identifier of the Flight Plan for the Telemetry data.");
            entity.Property(e => e.IsIncomplete)
                .HasDefaultValue(false)
                .HasComment("Indicates if the Telemetry data is incomplete.");
            entity.Property(e => e.PhaseSequenceNubmer).HasComment("The sequential count of data recordings within the flight phase.");
            entity.Property(e => e.TelemetryTimestamp)
                .HasComment("Timestamp of the Telemetry data.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.FlightPhaseCodeNavigation).WithMany(p => p.Telemetries)
                .HasForeignKey(d => d.FlightPhaseCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetry_FlightPhase");

            entity.HasOne(d => d.FlightPlan).WithMany(p => p.Telemetries)
                .HasForeignKey(d => d.FlightPlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetry_FlightPlan");
        });

        modelBuilder.Entity<TelemetryElectricalSystem>(entity =>
        {
            entity.HasKey(e => e.TeleElectricalSystemId).HasName("pkcTelemetryElectricalSystem");

            entity.ToTable("TelemetryElectricalSystem", tb => tb.HasComment("Table to store the electrical system data for a flight."));

            entity.Property(e => e.TeleElectricalSystemId).HasComment("Identifier of the electrical system data for a flight.");
            entity.Property(e => e.BatteryStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The status of the battery in the electrical system.");
            entity.Property(e => e.FlightTelemetryId).HasComment("Identifier of the Telemetry data for a flight.");
            entity.Property(e => e.IsIncomplete)
                .HasDefaultValue(false)
                .HasComment("Indicates if the electrical system data is incomplete.");
            entity.Property(e => e.PowerDistribution)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The distribution of power in the electrical system.");
            entity.Property(e => e.PowerGeneration).HasComment("The amount of power generated by the electrical system in watts.");

            entity.HasOne(d => d.FlightTelemetry).WithMany(p => p.TelemetryElectricalSystems)
                .HasForeignKey(d => d.FlightTelemetryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryElectricalSystem_Telemetry");
        });

        modelBuilder.Entity<TelemetryElectricalSystemFault>(entity =>
        {
            entity.HasKey(e => e.TelemetryElectricalSystemFaultId).HasName("pkcTelemetryElectricalSystemFault");

            entity.ToTable("TelemetryElectricalSystemFault", tb => tb.HasComment("Table to store the fault codes for an electrical system data record."));

            entity.Property(e => e.TelemetryElectricalSystemFaultId).HasComment("Identifier of the fault code for an electrical system data record.");
            entity.Property(e => e.FaultCode)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The fault code for an electrical system data record.");
            entity.Property(e => e.TelemetryElectricalSystemId).HasComment("Identifier of the electrical system data for a flight.");

            entity.HasOne(d => d.TelemetryElectricalSystem).WithMany(p => p.TelemetryElectricalSystemFaults)
                .HasForeignKey(d => d.TelemetryElectricalSystemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryElectricalSystemFault_TelemetryElectricalSystem");
        });

        modelBuilder.Entity<TelemetryEngineDataFaultCode>(entity =>
        {
            entity.HasKey(e => e.TelemetryEngineDataFaultCodeId).HasName("pkcTelemetryEngineDataFaultCode");

            entity.ToTable("TelemetryEngineDataFaultCode", tb => tb.HasComment("Table to store the fault codes for an engine data record."));

            entity.Property(e => e.TelemetryEngineDataFaultCodeId).HasComment("Identifier of the fault code for an engine data record.");
            entity.Property(e => e.FaultCode)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The fault code for an engine data record.");
            entity.Property(e => e.TelemetryEngineDataId).HasComment("Identifier of the engine data for a flight.");

            entity.HasOne(d => d.TelemetryEngineData).WithMany(p => p.TelemetryEngineDataFaultCodes)
                .HasForeignKey(d => d.TelemetryEngineDataId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryEngineDataFaultCode_TelemetryEngineData");
        });

        modelBuilder.Entity<TelemetryEngineDatum>(entity =>
        {
            entity.HasKey(e => e.TelemetryEngineDataId).HasName("pkcTelemetryEngineData");

            entity.ToTable(tb => tb.HasComment("Table to store the engine data for a flight."));

            entity.Property(e => e.TelemetryEngineDataId).HasComment("Identifier of the engine data for a flight.");
            entity.Property(e => e.EngineNumber).HasComment("The number of the engine.");
            entity.Property(e => e.EngineSpeed).HasComment("The speed of the engine in revolutions per minute.");
            entity.Property(e => e.ExhaustGasTemperature).HasComment("The temperature of the engine exhaust gases in degrees Celsius.");
            entity.Property(e => e.FlightTelemetryId).HasComment("Identifier of the Telemetry data for a flight.");
            entity.Property(e => e.FuelFlowRate).HasComment("The rate of fuel flow to the engine in liters per hour.");
            entity.Property(e => e.IsIncomplete)
                .HasDefaultValue(false)
                .HasComment("Indicates if the engine data is incomplete.");
            entity.Property(e => e.OilPressure).HasComment("The pressure of the engine oil in kilopascals.");
            entity.Property(e => e.OilTemperature).HasComment("The temperature of the engine oil in degrees Celsius.");
            entity.Property(e => e.Thrust).HasComment("The thrust of the engine in newtons.");

            entity.HasOne(d => d.FlightTelemetry).WithMany(p => p.TelemetryEngineData)
                .HasForeignKey(d => d.FlightTelemetryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryEngineData_Telemetry");
        });

        modelBuilder.Entity<TelemetryFlightParameter>(entity =>
        {
            entity.HasKey(e => e.TelemetryFlightParameterId).HasName("pkcTelemetryFlightParameters");

            entity.ToTable("TelemetryFlightParameter", tb => tb.HasComment("Table to store the flight parameters data for a flight."));

            entity.Property(e => e.TelemetryFlightParameterId).HasComment("Identifier of the flight parameter record.");
            entity.Property(e => e.Altitude).HasComment("The altitude of the aircraft at the time of the Telemetry data.");
            entity.Property(e => e.FlightTelemetryId).HasComment("Identifier of the Telemetry data for a flight.");
            entity.Property(e => e.FlightTime).HasComment("The time of the flight in milliseconds.");
            entity.Property(e => e.Heading).HasComment("The heading of the aircraft at the time of the Telemetry data.");
            entity.Property(e => e.IsIncomplete)
                .HasDefaultValue(false)
                .HasComment("Indicates if the flight parameters data is incomplete.");
            entity.Property(e => e.Pitch).HasComment("The pitch of the aircraft at the time of the Telemetry data.");
            entity.Property(e => e.Roll).HasComment("The roll of the aircraft at the time of the Telemetry data.");
            entity.Property(e => e.VerticalSpeed).HasComment("The vertical speed of the aircraft at the time of the Telemetry data.");
            entity.Property(e => e.Yaw).HasComment("The yaw of the aircraft at the time of the Telemetry data.");

            entity.HasOne(d => d.FlightTelemetry).WithMany(p => p.TelemetryFlightParameters)
                .HasForeignKey(d => d.FlightTelemetryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryFlightParameters_Telemetry");
        });

        modelBuilder.Entity<TelemetryFuelSystemDatum>(entity =>
        {
            entity.HasKey(e => e.TelemetryFuelSystemDataId).HasName("pkcTelemetryFuelSystemData");

            entity.ToTable(tb => tb.HasComment("Table to store the fuel system data for a flight."));

            entity.Property(e => e.TelemetryFuelSystemDataId).HasComment("Identifier of the fuel system data for a flight.");
            entity.Property(e => e.FlightTelemetryId).HasComment("Identifier of the Telemetry data for a flight.");
            entity.Property(e => e.FuelConsumptionRate).HasComment("The rate of fuel consumption in liters per hour.");
            entity.Property(e => e.FuelQuantity).HasComment("The quantity of fuel in the fuel system in liters.");
            entity.Property(e => e.IsIncomplete)
                .HasDefaultValue(false)
                .HasComment("Indicates if the fuel system data is incomplete.");

            entity.HasOne(d => d.FlightTelemetry).WithMany(p => p.TelemetryFuelSystemData)
                .HasForeignKey(d => d.FlightTelemetryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryFuelSystemData_Telemetry");
        });

        modelBuilder.Entity<TelemetryFuelTankLevel>(entity =>
        {
            entity.HasKey(e => e.TelemetryFuelTankLevelId).HasName("pkcTelemetryFuelTankLevel");

            entity.ToTable("TelemetryFuelTankLevel", tb => tb.HasComment("Table to store the fuel tank levels for a fuel system data record."));

            entity.Property(e => e.TelemetryFuelTankLevelId).HasComment("Identifier of the fuel tank level for a fuel system data record.");
            entity.Property(e => e.FuelLevel).HasComment("The level of fuel in the fuel tank in liters.");
            entity.Property(e => e.TankNumber).HasComment("The number of the fuel tank.");
            entity.Property(e => e.TelemetryFuelSystemDataId).HasComment("Identifier of the fuel system data for a flight.");

            entity.HasOne(d => d.TelemetryFuelSystemData).WithMany(p => p.TelemetryFuelTankLevels)
                .HasForeignKey(d => d.TelemetryFuelSystemDataId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryFuelTankLevel_TelemetryFuelSystemData");
        });

        modelBuilder.Entity<TelemetryHydraulicSystem>(entity =>
        {
            entity.HasKey(e => e.TelemetryHydraulicSystemId).HasName("pkcTelemetryHydraulicSystem");

            entity.ToTable("TelemetryHydraulicSystem", tb => tb.HasComment("Table to store the hydraulic system data for a flight."));

            entity.Property(e => e.TelemetryHydraulicSystemId).HasComment("Identifier of the hydraulic system data for a flight.");
            entity.Property(e => e.ActuatorStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The status of the actuators in the hydraulic system.");
            entity.Property(e => e.FlightTelemetryId).HasComment("Identifier of the Telemetry data for a flight.");
            entity.Property(e => e.HydraulicPressure).HasComment("The pressure of the hydraulic system in psi.");
            entity.Property(e => e.IsIncomplete)
                .HasDefaultValue(false)
                .HasComment("Indicates if the hydraulic system data is incomplete.");

            entity.HasOne(d => d.FlightTelemetry).WithMany(p => p.TelemetryHydraulicSystems)
                .HasForeignKey(d => d.FlightTelemetryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryHydraulicSystem_Telemetry");
        });

        modelBuilder.Entity<TelemetryHydraulicSystemFluidLevel>(entity =>
        {
            entity.HasKey(e => e.TeleHydraulicSystemFluidLevelId).HasName("pkcTelemetryHydraulicSystemFluidLevel");

            entity.ToTable("TelemetryHydraulicSystemFluidLevel", tb => tb.HasComment("Table to store the fluid levels for a hydraulic system data record."));

            entity.Property(e => e.TeleHydraulicSystemFluidLevelId).HasComment("Identifier of the fluid level for a hydraulic system data record.");
            entity.Property(e => e.FluidLevel).HasComment("The fluid level in the hydraulic system in liters.");
            entity.Property(e => e.TelemetryHydraulicSystemId).HasComment("Identifier of the hydraulic system data for a flight.");

            entity.HasOne(d => d.TelemetryHydraulicSystem).WithMany(p => p.TelemetryHydraulicSystemFluidLevels)
                .HasForeignKey(d => d.TelemetryHydraulicSystemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryHydraulicSystemFluidLevel_TelemetryHydraulicSystem");
        });

        modelBuilder.Entity<TelemetryLocation>(entity =>
        {
            entity.HasKey(e => e.TelemetryLocationId).HasName("pkcTelemetryLocation");

            entity.ToTable("TelemetryLocation", tb => tb.HasComment("Table to store the location data for a flight."));

            entity.Property(e => e.TelemetryLocationId).HasComment("Identifier of the location data for a flight.");
            entity.Property(e => e.DistanceFromOrigin).HasComment("The distance traveled in kilometers since the origin of the flight.");
            entity.Property(e => e.DistanceSinceLastReport).HasComment("The distance traveled in kilometers since the last Telemetry data.");
            entity.Property(e => e.DistanceToDestination).HasComment("The distance remaining in kilometers to the destination of the flight.");
            entity.Property(e => e.FlightTelemetryId).HasComment("Identifier of the Telemetry data for a flight.");
            entity.Property(e => e.IsIncomplete)
                .HasDefaultValue(false)
                .HasComment("Indicates if the location data is incomplete.");
            entity.Property(e => e.Latitude).HasComment("The latitude of the aircraft at the time of the Telemetry data.");
            entity.Property(e => e.Longitude).HasComment("The longitude of the aircraft at the time of the Telemetry data.");

            entity.HasOne(d => d.FlightTelemetry).WithMany(p => p.TelemetryLocations)
                .HasForeignKey(d => d.FlightTelemetryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTelemetryLocation_Telemetry");
        });

        modelBuilder.Entity<WorldRegion>(entity =>
        {
            entity.HasKey(e => e.WorldRegionCode).HasName("pkcWorldRegion");

            entity.ToTable("WorldRegion", tb => tb.HasComment("Lookup table representing the world regions as defined by the UN M49 specification."));

            entity.HasIndex(e => e.ParentId, "idxWorldRegion_ParentId");

            entity.Property(e => e.WorldRegionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region.");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the world region is active.");
            entity.Property(e => e.ParentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region parent (for subregions).");
            entity.Property(e => e.WorldRegionName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the world region.");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("fkWorldRegion_WorldRegion");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}